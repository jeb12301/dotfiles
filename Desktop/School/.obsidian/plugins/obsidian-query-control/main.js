/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/main.ts
__export(exports, {
  default: () => EmbeddedQueryControlPlugin
});

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/main.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/search-renderer.ts
var import_obsidian = __toModule(require("obsidian"));
var isFifteenPlus = import_obsidian.requireApiVersion && (0, import_obsidian.requireApiVersion)("0.15.0");
var SearchMarkdownRenderer = class extends import_obsidian.MarkdownRenderer {
  constructor(app, containerEl, match) {
    super(app, containerEl);
    this.app = app;
    this.match = match;
    this.subpath = "";
    this.indent = "";
    this.filePath = isFifteenPlus ? this.match.parentDom.path : this.match.parent.path;
    this.file = isFifteenPlus ? this.match.parentDom.file : this.match.parent.file;
    this.renderer.previewEl.onNodeInserted(() => {
      this.updateOptions();
      return this.renderer.onResize();
    });
  }
  updateOptions() {
    let readableLineLength = this.app.vault.getConfig("readableLineLength");
    this.renderer.previewEl.toggleClass("is-readable-line-width", readableLineLength);
    let foldHeading = this.app.vault.getConfig("foldHeading");
    this.renderer.previewEl.toggleClass("allow-fold-headings", foldHeading);
    let foldIndent = this.app.vault.getConfig("foldIndent");
    this.renderer.previewEl.toggleClass("allow-fold-lists", foldIndent);
    this.renderer.previewEl.toggleClass("rtl", this.app.vault.getConfig("rightToLeft"));
    if (!foldHeading) {
      this.renderer.unfoldAllHeadings();
    }
    if (!foldIndent) {
      this.renderer.unfoldAllLists();
    }
    this.renderer.previewEl.toggleClass("show-frontmatter", this.app.vault.getConfig("showFrontmatter"));
    let tabSize = this.app.vault.getConfig("tabSize");
    this.renderer.previewEl.style.tabSize = String(tabSize);
    this.renderer.rerender();
  }
  onRenderComplete() {
  }
  getFile() {
    return this.match.parent.file;
  }
  edit(content) {
    return __async(this, null, function* () {
      var _a;
      this.renderer.set(content);
      let cachedContent = yield this.app.vault.cachedRead(this.file);
      let matchContent = cachedContent.slice(this.match.start, this.match.end);
      let leadingSpaces = (_a = matchContent.match(/^\s+/g)) == null ? void 0 : _a.first();
      if (leadingSpaces) {
        content = content.replace(/^/gm, leadingSpaces);
      }
      let before = cachedContent.slice(0, this.match.start);
      let after = cachedContent.slice(this.match.end, this.match.parent.content.length);
      var combinedContent = before + content + after;
      this.app.vault.modify(this.file, combinedContent);
    });
  }
};

// src/settings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/utils.ts
var translate = i18next.t.bind(i18next);

// src/settings.ts
var DEFAULT_SETTINGS = {
  defaultCollapse: false,
  defaultShowContext: false,
  defaultHideTitle: false,
  defaultHideResults: false,
  defaultRenderMarkdown: false,
  defaultSortOrder: "alphabetical"
};
var sortOptions = {
  alphabetical: translate("plugins.file-explorer.label-sort-a-to-z"),
  alphabeticalReverse: translate("plugins.file-explorer.label-sort-z-to-a"),
  byModifiedTime: translate("plugins.file-explorer.label-sort-new-to-old"),
  byModifiedTimeReverse: translate("plugins.file-explorer.label-sort-old-to-new"),
  byCreatedTime: translate("plugins.file-explorer.label-sort-created-new-to-old"),
  byCreatedTimeReverse: translate("plugins.file-explorer.label-sort-created-old-to-new")
};
var SettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  hide() {
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Collapse query results by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultCollapse).onChange((value) => {
      this.plugin.settings.defaultCollapse = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Show additional query result context by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultShowContext).onChange((value) => {
      this.plugin.settings.defaultShowContext = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Hide query title by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultHideTitle).onChange((value) => {
      this.plugin.settings.defaultHideTitle = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Hide query results by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultHideResults).onChange((value) => {
      this.plugin.settings.defaultHideResults = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Render results as Markdown by default").addToggle((toggle) => toggle.setValue(this.plugin.settings.defaultRenderMarkdown).onChange((value) => {
      this.plugin.settings.defaultRenderMarkdown = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Default query result sort order").addDropdown((cb) => {
      cb.addOptions(sortOptions);
      cb.setValue(this.plugin.settings.defaultSortOrder);
      cb.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.defaultSortOrder = value;
        yield this.plugin.saveSettings();
      }));
    });
  }
};

// src/main.ts
var isFifteenPlus2 = import_obsidian3.requireApiVersion && (0, import_obsidian3.requireApiVersion)("0.15.0");
var backlinkDoms = new WeakMap();
var EmbeddedQueryControlPlugin = class extends import_obsidian3.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      let plugin = this;
      this.registerSettingsTab();
      this.register(around(this.app.viewRegistry.constructor.prototype, {
        registerView(old) {
          return function(type, viewCreator, ...args) {
            plugin.app.workspace.trigger("view-registered", type, viewCreator);
            return old.call(this, type, viewCreator, ...args);
          };
        }
      }));
      let uninstall;
      if (!this.app.workspace.layoutReady) {
        let eventRef = this.app.workspace.on("view-registered", (type, viewCreator) => {
          if (type !== "search")
            return;
          this.app.workspace.offref(eventRef);
          let leaf = new import_obsidian3.WorkspaceLeaf(plugin.app);
          let searchView = viewCreator(leaf);
          plugin.patchNativeSearch(searchView);
          let uninstall2 = around(import_obsidian3.Modal.prototype, {
            open(old) {
              return function(...args) {
                plugin.SearchResultsExport = this.constructor;
                return;
              };
            }
          });
          searchView.onCopyResultsClick(new MouseEvent(null));
          uninstall2();
        });
      } else {
        this.getSearchExport();
      }
      this.register(uninstall = around(import_obsidian3.Component.prototype, {
        addChild(old) {
          return function(child, ...args) {
            try {
              if (!plugin.isSearchPatched && child instanceof import_obsidian3.Component && child.hasOwnProperty("searchQuery") && child.hasOwnProperty("sourcePath") && child.hasOwnProperty("dom")) {
                let EmbeddedSearch = child;
                plugin.patchSearchView(EmbeddedSearch);
                plugin.isSearchPatched = true;
              }
              if (child instanceof import_obsidian3.Component && child.hasOwnProperty("backlinkDom")) {
                let backlinks = child;
                backlinkDoms.set(backlinks.backlinkDom.el.closest(".backlink-pane"), child);
                if (!plugin.isBacklinksPatched) {
                  plugin.patchBacklinksView(backlinks);
                  plugin.isBacklinksPatched = true;
                }
              }
            } catch (err) {
              console.log(err);
            }
            const result = old.call(this, child, ...args);
            return result;
          };
        }
      }));
    });
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  registerSettingsTab() {
    this.settingsTab = new SettingTab(this.app, this);
    this.addSettingTab(this.settingsTab);
  }
  getSearchExport() {
    var _a, _b;
    const plugin = this;
    let searchView = (_b = (_a = this.app.workspace.getLeavesOfType("search")) == null ? void 0 : _a.first()) == null ? void 0 : _b.view;
    let uninstall = around(import_obsidian3.Modal.prototype, {
      open(old) {
        return function(...args) {
          plugin.SearchResultsExport = this.constructor;
          return;
        };
      }
    });
    searchView == null ? void 0 : searchView.onCopyResultsClick(new MouseEvent(null));
    uninstall();
  }
  onunload() {
  }
  patchNativeSearch(searchView) {
    const plugin = this;
    this.register(around(searchView.constructor.prototype, {
      onResize(old) {
        return function(...args) {
          var _a;
          const _children = isFifteenPlus2 ? (_a = this.dom.vChildren) == null ? void 0 : _a._children : this.dom.children;
          if (this.dom.el.clientWidth === 0) {
            _children.forEach((child) => {
              child.setCollapse(true, false);
            });
            this.dom.hidden = true;
          } else if (this.dom.hidden) {
            this.dom.hidden = false;
            setTimeout(() => {
              _children.forEach((child) => {
                child.setCollapse(this.dom.collapseAll, false);
              });
            }, 100);
          }
          return old.call(this, ...args);
        };
      },
      stopSearch(old) {
        return function(...args) {
          const result = old.call(this, ...args);
          if (this.renderComponent) {
            this.renderComponent.unload();
            this.renderComponent = new import_obsidian3.Component();
          }
          return result;
        };
      },
      addChild(old) {
        return function(...args) {
          try {
            if (!this.patched) {
              if (!this.renderComponent) {
                this.renderComponent = new import_obsidian3.Component();
                this.renderComponent.load();
              }
              this.patched = true;
              this.dom.parent = this;
              plugin.patchSearchResultDOM(this.dom.constructor);
              this.setRenderMarkdown = function(value) {
                var _a;
                const _children = isFifteenPlus2 ? (_a = this.dom.vChildren) == null ? void 0 : _a._children : this.dom.children;
                this.dom.renderMarkdown = value;
                _children.forEach((child) => {
                  child.renderContentMatches();
                });
                this.dom.infinityScroll.invalidateAll();
                this.dom.childrenEl.toggleClass("cm-preview-code-block", value);
                this.dom.childrenEl.toggleClass("is-rendered", value);
              };
              let allSettings = {
                renderMarkdown: plugin.settings.defaultRenderMarkdown
              };
              if (!this.settings)
                this.settings = {};
              Object.entries(allSettings).forEach(([setting, defaultValue]) => {
                if (!this.settings.hasOwnProperty(setting)) {
                  this.settings[setting] = defaultValue;
                } else if (setting === "sort" && !sortOptions.hasOwnProperty(this.settings.sort)) {
                  this.settings[setting] = defaultValue;
                }
              });
              this.setRenderMarkdown(this.settings.renderMarkdown);
            } else {
            }
          } catch (err) {
            console.log(err);
          }
          const result = old.call(this, ...args);
          return result;
        };
      }
    }));
  }
  patchSearchResultDOM(SearchResult) {
    const plugin = this;
    let uninstall = around(SearchResult.prototype, {
      addResult(old) {
        return function(...args) {
          uninstall();
          const result = old.call(this, ...args);
          let SearchResultItem2 = result.constructor;
          if (!plugin.isSearchResultItemPatched)
            plugin.patchSearchResultItem(SearchResultItem2);
          return result;
        };
      }
    });
    this.register(uninstall);
    this.register(around(SearchResult.prototype, {
      startLoader(old) {
        return function(...args) {
          var _a, _b;
          try {
            let containerEl = this.el.closest(".backlink-pane");
            let backlinksInstance = backlinkDoms.get(containerEl);
            if (containerEl && backlinksInstance) {
              if (backlinksInstance.patched)
                return;
              handleBacklinks(this, plugin, containerEl, backlinksInstance);
              return;
            }
            if (!this.patched && ((_a = this.el.parentElement) == null ? void 0 : _a.hasClass("internal-query"))) {
              if ((_b = this.el) == null ? void 0 : _b.closest(".internal-query")) {
                this.patched = true;
                let defaultHeaderEl = this.el.parentElement.querySelector(".internal-query-header");
                this.setExtraContext = function(value) {
                  var _a2;
                  const _children = isFifteenPlus2 ? (_a2 = this.vChildren) == null ? void 0 : _a2._children : this.children;
                  this.extraContext = value;
                  _children.forEach((child) => {
                    child.setExtraContext(value);
                  });
                  this.infinityScroll.invalidateAll();
                };
                this.setTitleDisplay = function(value) {
                  this.showTitle = value;
                  defaultHeaderEl.toggleClass("is-hidden", value);
                };
                this.setResultsDisplay = function(value) {
                  this.showResults = value;
                  this.el.toggleClass("is-hidden", value);
                };
                this.setRenderMarkdown = function(value) {
                  var _a2;
                  this.renderMarkdown = value;
                  const _children = isFifteenPlus2 ? (_a2 = this.vChildren) == null ? void 0 : _a2._children : this.children;
                  _children.forEach((child) => {
                    child.renderContentMatches();
                  });
                  this.infinityScroll.invalidateAll();
                  this.childrenEl.toggleClass("cm-preview-code-block", value);
                  this.childrenEl.toggleClass("is-rendered", value);
                };
                this.setCollapseAll = function(value) {
                  var _a2;
                  const _children = isFifteenPlus2 ? (_a2 = this.vChildren) == null ? void 0 : _a2._children : this.children;
                  this.collapseAll = value;
                  _children.forEach((child) => {
                    child.setCollapse(value, false);
                  });
                  this.infinityScroll.invalidateAll();
                };
                this.setSortOrder = (sortType) => {
                  this.sortOrder = sortType;
                  this.changed();
                  this.infinityScroll.invalidateAll();
                };
                this.onCopyResultsClick = (event) => {
                  event.preventDefault();
                  new plugin.SearchResultsExport(this.app, this).open();
                };
                let allSettings = {
                  title: plugin.settings.defaultHideResults,
                  collapsed: plugin.settings.defaultCollapse,
                  context: plugin.settings.defaultShowContext,
                  hideTitle: plugin.settings.defaultHideTitle,
                  hideResults: plugin.settings.defaultHideResults,
                  renderMarkdown: plugin.settings.defaultRenderMarkdown,
                  sort: plugin.settings.defaultSortOrder
                };
                if (!this.settings)
                  this.settings = {};
                Object.entries(allSettings).forEach(([setting, defaultValue]) => {
                  if (!this.settings.hasOwnProperty(setting)) {
                    this.settings[setting] = defaultValue;
                  } else if (setting === "sort" && !sortOptions.hasOwnProperty(this.settings.sort)) {
                    this.settings[setting] = defaultValue;
                  }
                });
                this.setExtraContext(this.settings.context);
                this.sortOrder = this.settings.sort;
                this.setCollapseAll(this.settings.collapsed);
                this.setTitleDisplay(this.settings.hideTitle);
                this.setRenderMarkdown(this.settings.renderMarkdown);
                this.setResultsDisplay(this.settings.hideResults);
              } else {
              }
            }
          } catch (err) {
            console.log(err);
          }
          const result = old.call(this, ...args);
          return result;
        };
      }
    }));
  }
  patchSearchResultItem(SearchResultItemClass) {
    this.isSearchResultItemPatched = true;
    const plugin = this;
    let uninstall = around(SearchResultItemClass.prototype, {
      onResultClick(old) {
        return function(event, e, ...args) {
          if (event.target instanceof HTMLElement && (event.target.hasClass("internal-link") || event.target.hasClass("task-list-item-checkbox") || event.target.hasClass("admonition-title-content"))) {
          } else {
            return old.call(this, event, e, ...args);
          }
        };
      },
      renderContentMatches(old) {
        return function(...args) {
          var _a;
          const result = old.call(this, ...args);
          const _children = isFifteenPlus2 ? (_a = this.vChildren) == null ? void 0 : _a._children : this.children;
          if (!plugin.isSearchResultItemMatchPatched && _children.length) {
            let SearchResultItemMatch = _children.first().constructor;
            plugin.patchSearchResultItemMatch(SearchResultItemMatch);
          }
          return result;
        };
      }
    });
    plugin.register(uninstall);
  }
  patchSearchResultItemMatch(SearchResultItemMatch) {
    this.isSearchResultItemMatchPatched = true;
    const plugin = this;
    plugin.register(around(SearchResultItemMatch.prototype, {
      render(old) {
        return function(...args) {
          var _a;
          let _parent = isFifteenPlus2 ? this.parentDom : this.parent;
          let content = _parent.content.substring(this.start, this.end).replace("```query", "\\`\\`\\`query");
          let leadingSpaces = (_a = content.match(/^\s+/g)) == null ? void 0 : _a.first();
          if (leadingSpaces) {
            content = content.replace(new RegExp(`^${leadingSpaces}`, "gm"), "");
          }
          let parentComponent = _parent.parent.parent;
          if (parentComponent && _parent.parent.renderMarkdown) {
            let component = parentComponent == null ? void 0 : parentComponent.renderComponent;
            this.el.empty();
            let renderer = new SearchMarkdownRenderer(plugin.app, this.el, this);
            renderer.onRenderComplete = () => {
              var _a2;
              (_a2 = _parent == null ? void 0 : _parent.parent) == null ? void 0 : _a2.infinityScroll.measure(_parent, this);
            };
            component.addChild(renderer);
            renderer.renderer.set(content);
          } else {
            return old.call(this, ...args);
          }
        };
      }
    }));
  }
  patchSearchView(embeddedSearch) {
    const plugin = this;
    const EmbeddedSearch = embeddedSearch.constructor;
    const SearchResult = embeddedSearch.dom.constructor;
    this.register(around(EmbeddedSearch.prototype, {
      onunload(old) {
        return function(...args) {
          if (this.renderComponent) {
            this.renderComponent.unload();
            this.dom = null;
            this.queue = null;
            this.renderComponent = null;
            this._children = null;
            this.containerEl = null;
          }
          const result = old.call(this, ...args);
          return result;
        };
      },
      onload(old) {
        return function(...args) {
          try {
            if (!this.renderComponent) {
              this.renderComponent = new import_obsidian3.Component();
              this.renderComponent.load();
            }
            this.dom.parent = this;
            let defaultHeaderEl = this.containerEl.parentElement.querySelector(".internal-query-header");
            let matches = this.query.matchAll(/^(?<key>collapsed|context|hideTitle|renderMarkdown|hideResults|sort|title):\s*(?<value>.+?)$/gm);
            let settings = {};
            for (let match of matches) {
              let value = match.groups.value.toLowerCase();
              if (value === "true" || value === "false") {
                match.groups.value = value === "true";
              }
              settings[match.groups.key] = match.groups.value;
            }
            this.query = this.query.replace(/^((collapsed|context|hideTitle|renderMarkdown|hideResults|sort|title):.+?)$/gm, "").trim();
            defaultHeaderEl.setText(settings.title || this.query);
            this.dom.settings = settings;
          } catch (e) {
          }
          const result = old.call(this, ...args);
          return result;
        };
      }
    }));
    this.patchSearchResultDOM(SearchResult);
  }
  patchBacklinksView(backlinks) {
    const plugin = this;
    const Backlink = backlinks.constructor;
    const BacklinkDOM = backlinks.backlinkDom.constructor;
    this.register(around(Backlink.prototype, {
      onunload(old) {
        return function(...args) {
          if (this.renderComponent) {
            this.renderComponent.unload();
            this.dom = null;
            this.queue = null;
            this.renderComponent = null;
            this._children = null;
            this.containerEl = null;
          }
          const result = old.call(this, ...args);
          return result;
        };
      },
      onload(old) {
        return function(...args) {
          try {
            if (!this.renderComponent) {
              this.renderComponent = new import_obsidian3.Component();
              this.renderComponent.load();
            }
            this.backlinkDom.parent = this;
            this.unlinkedDom.parent = this;
            let settings = {};
            this.dom.settings = settings;
          } catch (e) {
          }
          const result = old.call(this, ...args);
          return result;
        };
      }
    }));
    this.patchSearchResultDOM(BacklinkDOM);
  }
};
function handleBacklinks(instance, plugin, containerEl, backlinksInstance) {
  if (backlinksInstance) {
    backlinksInstance.patched = true;
    let defaultHeaderEl = containerEl.querySelector(".internal-query-header") || containerEl.querySelector(".nav-header");
    instance.setRenderMarkdown = function(value) {
      const doms = [backlinksInstance.backlinkDom, backlinksInstance.unlinkedDom];
      doms.forEach((dom) => {
        var _a;
        dom.renderMarkdown = value;
        const _children = isFifteenPlus2 ? (_a = dom.vChildren) == null ? void 0 : _a._children : dom.children;
        _children.forEach((child) => {
          child.renderContentMatches();
        });
        dom.infinityScroll.invalidateAll();
        dom.childrenEl.toggleClass("cm-preview-code-block", value);
        dom.childrenEl.toggleClass("is-rendered", value);
      });
      this.renderMarkdownButtonEl.toggleClass("is-active", value);
    };
    instance.onCopyResultsClick = (event) => {
      event.preventDefault();
      new plugin.SearchResultsExport(instance.app, instance).open();
    };
    instance.renderMarkdownButtonEl = backlinksInstance.headerDom.addNavButton("reading-glasses", "Render Markdown", () => {
      return instance.setRenderMarkdown(!instance.renderMarkdown);
    });
    backlinksInstance.headerDom.addNavButton("documents", "Copy results", instance.onCopyResultsClick.bind(instance));
    let allSettings = {
      title: plugin.settings.defaultHideResults,
      collapsed: plugin.settings.defaultCollapse,
      context: plugin.settings.defaultShowContext,
      hideTitle: plugin.settings.defaultHideTitle,
      hideResults: plugin.settings.defaultHideResults,
      renderMarkdown: plugin.settings.defaultRenderMarkdown,
      sort: plugin.settings.defaultSortOrder
    };
    if (!instance.settings)
      instance.settings = {};
    Object.entries(allSettings).forEach(([setting, defaultValue]) => {
      if (!instance.settings.hasOwnProperty(setting)) {
        instance.settings[setting] = defaultValue;
      } else if (setting === "sort" && !sortOptions.hasOwnProperty(instance.settings.sort)) {
        instance.settings[setting] = defaultValue;
      }
    });
    backlinksInstance.setExtraContext(instance.settings.context);
    backlinksInstance.sortOrder = instance.settings.sort;
    backlinksInstance.setCollapseAll(instance.settings.collapsed);
    instance.setRenderMarkdown(instance.settings.renderMarkdown);
  } else {
  }
}
//# sourceMappingURL=data:application/json;base64,
